<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.bol.flink.reproduce</groupId>
  <artifactId>FLINK-4485</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Trying to reproduce FLINK-4485</name>


  <properties>
    <jdkLevel>1.7</jdkLevel>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.outputEncoding>UTF-8</project.build.outputEncoding>

    <!--The maven packages for Flink are annotated with the kafka and scala versions that they need.
    These are sometimes formatted in a slightly different way so we define them here. -->
    <flink.version>1.1.1</flink.version>
    <flink.kafka.version>0.9</flink.kafka.version>
    <flink.scala.version>2.10</flink.scala.version>

    <hadoop.version>2.3.0</hadoop.version>
    <hbase.version>1.1.2</hbase.version>
  </properties>

  <dependencies>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>15.0</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-java</artifactId>
      <version>${flink.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-core-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-clients_${flink.scala.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-hbase_${flink.scala.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-core</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-yarn_${flink.scala.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-server</artifactId>
      <version>${hbase.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-client</artifactId>
      <version>${hbase.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.13</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-lgpl</artifactId>
      <version>1.9.13</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-lgpl</artifactId>
      <version>1.9.13</version>
    </dependency>

  </dependencies>

  <build>

    <plugins>
      <!-- We use the maven-shade plugin to create a fat jar that contains all dependencies
      except flink and it's transitive dependencies. The resulting fat-jar can be executed
      on a cluster. Change the value of Program-Class if your program entry point changes. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <!-- Run shade goal on package phase -->
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <artifactSet>
                <excludes>
                  <!-- This list contains all dependencies of flink-dist
                  Everything else will be packaged into the fat-jar
                  -->
                  <exclude>org.apache.flink:flink-shaded-*</exclude>
                  <exclude>org.apache.flink:flink-core</exclude>
                  <exclude>org.apache.flink:flink-java</exclude>
                  <exclude>org.apache.flink:flink-scala</exclude>
                  <exclude>org.apache.flink:flink-runtime</exclude>
                  <exclude>org.apache.flink:flink-optimizer</exclude>
                  <exclude>org.apache.flink:flink-clients</exclude>
                  <exclude>org.apache.flink:flink-spargel</exclude>
                  <exclude>org.apache.flink:flink-avro</exclude>
                  <exclude>org.apache.flink:flink-java-examples</exclude>
                  <exclude>org.apache.flink:flink-scala-examples</exclude>
                  <exclude>org.apache.flink:flink-streaming-examples</exclude>
                  <exclude>org.apache.flink:flink-streaming-core</exclude>

                  <!-- Also exclude very big transitive dependencies of Flink

                  WARNING: You have to remove these excludes if your code relies on other
                  versions of these dependencies.

                  -->
                  <exclude>org.scala-lang:scala-library</exclude>
                  <exclude>org.scala-lang:scala-compiler</exclude>
                  <exclude>org.scala-lang:scala-reflect</exclude>
                  <exclude>com.amazonaws:aws-java-sdk</exclude>
                  <exclude>com.typesafe.akka:akka-actor_*</exclude>
                  <exclude>com.typesafe.akka:akka-remote_*</exclude>
                  <exclude>com.typesafe.akka:akka-slf4j_*</exclude>
                  <exclude>io.netty:netty-all</exclude>
                  <exclude>io.netty:netty</exclude>
                  <exclude>org.eclipse.jetty:jetty-server</exclude>
                  <exclude>org.eclipse.jetty:jetty-continuation</exclude>
                  <exclude>org.eclipse.jetty:jetty-http</exclude>
                  <exclude>org.eclipse.jetty:jetty-io</exclude>
                  <exclude>org.eclipse.jetty:jetty-util</exclude>
                  <exclude>org.eclipse.jetty:jetty-security</exclude>
                  <exclude>org.eclipse.jetty:jetty-servlet</exclude>
                  <exclude>commons-fileupload:commons-fileupload</exclude>
                  <exclude>org.apache.avro:avro</exclude>
                  <exclude>commons-collections:commons-collections</exclude>
                  <exclude>org.codehaus.jackson:jackson-core-asl</exclude>
                  <exclude>org.codehaus.jackson:jackson-mapper-asl</exclude>
                  <exclude>com.thoughtworks.paranamer:paranamer</exclude>
                  <exclude>org.xerial.snappy:snappy-java</exclude>
                  <exclude>org.apache.commons:commons-compress</exclude>
                  <exclude>org.tukaani:xz</exclude>
                  <exclude>com.esotericsoftware.kryo:kryo</exclude>
                  <exclude>com.esotericsoftware.minlog:minlog</exclude>
                  <exclude>org.objenesis:objenesis</exclude>
                  <exclude>com.twitter:chill_*</exclude>
                  <exclude>com.twitter:chill-java</exclude>
                  <exclude>com.twitter:chill-avro_*</exclude>
                  <exclude>com.twitter:chill-bijection_*</exclude>
                  <exclude>com.twitter:bijection-core_*</exclude>
                  <exclude>com.twitter:bijection-avro_*</exclude>
                  <exclude>commons-lang:commons-lang</exclude>
                  <exclude>junit:junit</exclude>
                  <exclude>de.javakaffee:kryo-serializers</exclude>
                  <exclude>joda-time:joda-time</exclude>
                  <exclude>org.apache.commons:commons-lang3</exclude>
                  <exclude>org.slf4j:slf4j-api</exclude>
                  <exclude>org.slf4j:slf4j-log4j12</exclude>
                  <exclude>log4j:log4j</exclude>
                  <exclude>org.apache.commons:commons-math</exclude>
                  <exclude>org.apache.sling:org.apache.sling.commons.json</exclude>
                  <exclude>commons-logging:commons-logging</exclude>
                  <exclude>org.apache.httpcomponents:httpclient</exclude>
                  <exclude>org.apache.httpcomponents:httpcore</exclude>
                  <exclude>commons-codec:commons-codec</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-core</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-annotations</exclude>
                  <exclude>org.codehaus.jettison:jettison</exclude>
                  <exclude>stax:stax-api</exclude>
                  <exclude>com.typesafe:config</exclude>
                  <exclude>org.uncommons.maths:uncommons-maths</exclude>
                  <exclude>com.github.scopt:scopt_*</exclude>
                  <exclude>org.mortbay.jetty:servlet-api</exclude>
                  <exclude>commons-io:commons-io</exclude>
                  <exclude>commons-cli:commons-cli</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>org.apache.flink:*</artifact>
                  <excludes>
                    <exclude>org/apache/flink/shaded/**</exclude>
                    <exclude>web-docs/**</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <!-- add Main-Class to manifest file -->
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.bol.reproduce.FLINK4485.Main</mainClass>
                </transformer>
              </transformers>
              <createDependencyReducedPom>false</createDependencyReducedPom>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the jar plugin to add the main class as a manifest entry -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <archive>
            <manifestEntries>
              <Main-Class>com.bol.reproduce.FLINK4485.Main</Main-Class>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${jdkLevel}</source>
          <target>${jdkLevel}</target>
        </configuration>
      </plugin>

    </plugins>

  </build>


  <profiles>
    <profile>
      <!-- A profile that does everyting correctly:
      We set the Flink dependencies to provided -->
      <id>build-jar</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.apache.flink</groupId>
          <artifactId>flink-java</artifactId>
          <version>${flink.version}</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.flink</groupId>
          <artifactId>flink-streaming-java_${flink.scala.version}</artifactId>
          <version>${flink.version}</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.flink</groupId>
          <artifactId>flink-clients_${flink.scala.version}</artifactId>
          <version>${flink.version}</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
